
#ifndef CSOCKET_H
#define CSOCKET_H

#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/un.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>

typedef unsigned short int tcport_t;

class CInetAddress
{
protected:
	struct in_addr m_stInetAddr;

public:
	CInetAddress();
	CInetAddress(const struct in_addr& stInetAddr);
	CInetAddress(const char* sInetAddr);
	inline struct in_addr GetAddress() const { return m_stInetAddr; }
	bool IsInetAddress() const;
	CInetAddress& operator = (const struct in_addr& stInetAddr);	
	CInetAddress& operator = (const char* sInetAddr);
};

class CSocket
{
protected:
	enum CState
	{
		S_INITIAL,
		S_AVAILABLE,
		S_BOUND,
		S_CONNECTED,
		S_CONNECTING
	};
	
protected:
	int m_iSocket;
	int m_iDomain;
	CState m_eState;
	bool m_bBlock;
	
public:
	int SocketFd() { return m_iSocket; }
	void SetBlock(bool bBlock);

protected:
	CSocket();
	CSocket(const CSocket* pstSocket);
	CSocket(int iDomain, int iType, int iProtocol = 0);
	virtual ~CSocket() { End(); }
	void End();
	void Bind(const CInetAddress& stInetAddr, tcport_t tPort);
	//void Bind(const CUnixAddress& stUnixAddr);
	
private:
	void Init();
	inline void Socket(int iDomain, int iType, int iProtocol = 0)
			{
				if ((m_iSocket = socket(iDomain, iType, iProtocol)) < 0)
					throw CSocketException(strerror(errno), __FILE__, __LINE__);
			}
};
#endif
